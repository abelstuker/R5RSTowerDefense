(load "constants-and-auxfunctions.rkt")

(define (make-movement speed total-x-distance total-y-distance)
  (let ((normalised #f)
        (x-distance #f)
        (y-distance #f))

    (define (normalise x y)
      (sqrt (+ (sqr x) (sqr y))))

    (define (update-movement!)
      (set! normalised (normalise total-x-distance total-y-distance))
      (set! x-distance (/ total-x-distance normalised))
      (set! y-distance (/ total-y-distance normalised)))

    (define (x-movement)
      (* x-distance speed))
    (define (y-movement)
      (* y-distance speed))

    ; (define (set-speed! new-speed) (set! speed new-speed)) pas nodig in fase 2
    
    (define (set-total-distances! new-x new-y)
      (set! total-x-distance new-x)
      (set! total-y-distance new-y)
      (update-movement!))

    (define (dispatch msg)
      (cond
        ((eq? msg 'get-speed) speed)
        ;((eq? msg 'set-speed!) set-speed!)
        ((eq? msg 'get-x-movement) x-movement)
        ((eq? msg 'get-y-movement) y-movement)
        ((eq? msg 'set-total-distances!) set-total-distances!)
        (else (display ("ERROR -- movement-adt dispatch message not understood")))))
    (update-movement!)
    dispatch))
  