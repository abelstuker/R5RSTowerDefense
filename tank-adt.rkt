(load "constants-and-auxfunctions.rkt")

(define (make-tank path)
  (let* ((current-index -1)
         (pathcell ((path 'get-pathcell-from-index) 0))
         (position (make-position (- ((pathcell 'get-position) 'get-x) 1)
                                  ((pathcell 'get-position) 'get-y)))
         (movement (make-movement tank-speed 1 0))
         (exit-direction 'right)
         (distance-to-new-pathcell 1))

    (define (update! ms screen level monsters)
      (when (<= distance-to-new-pathcell 0)
        (set! current-index (+ current-index 1))
        (set! pathcell ((path 'get-pathcell-from-index) current-index))
        (hurt-monsters! monsters)
        (set-exit-direction!)
        (ensure-exact-positioning!)
        (generate-next-destination!))
      (set! distance-to-new-pathcell (- distance-to-new-pathcell ((position 'move!) movement ms)))
      (if (>= (position 'get-grid-x) horizontal-cells-amount)
          ((level 'remove-power-up!))
          ((screen 'draw-game-element!) 'tank (list dispatch))))

    (define (hurt-monsters! monsters)
      (for-each (lambda (monster) (if (eq? (monster 'get-underlying-pathcell) pathcell)
                                      ((monster 'hurt-with-tank!) dispatch monsters)))
                monsters))

    (define (set-exit-direction!)
      (set! exit-direction (pathcell 'get-exit)))
    (define (ensure-exact-positioning!)
      (set! position (make-position ((pathcell 'get-position) 'get-x) ((pathcell 'get-position) 'get-y))))
                

    (define (generate-next-destination!)
      (if (< (+ current-index 1) ((path 'get-path-length)))
          (let* ((pathcell ((path 'get-pathcell-from-index) (+ current-index 1)))
                 (pathcell-position (pathcell 'get-position))
                 (x-difference (- (pathcell-position 'get-x)
                                  (position 'get-x)))
                 (y-difference (- (pathcell-position 'get-y)
                                  (position 'get-y))))
            ((movement 'set-total-distances!) x-difference y-difference)
            (set! distance-to-new-pathcell 1))
          (begin ((movement 'set-total-distances!) 1 0)
                 (set! distance-to-new-pathcell 1))))


    (define (dispatch msg)
      (cond ((eq? msg 'update!) update!)
            ((eq? msg 'get-position) position)
            ((eq? msg 'get-exit) exit-direction)
            (else (display msg) (display " ERROR -- message not understood by TANK"))))
    dispatch))