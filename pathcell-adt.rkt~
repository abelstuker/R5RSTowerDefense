(load "screen-adt.rkt")
(load "position-adt.rkt")

(define (make-pathcell entry exit position is-first? is-last?)
  (let ((delayed? #f))


    ; Comparing two pathcells' positions
    (define (equal? other-pathcell)
      (((other-pathcell 'get-position) 'compare?) position))

    (define (set-delayed!)
      (set! delayed? #t))
    (define (unset-delayed!)
      (set! delayed? #f))
    
    (define (dispatch msg)
      (cond ((eq? msg 'get-position) position)
            ((eq? msg 'get-entry) entry)
            ((eq? msg 'get-exit) exit)
            ((eq? msg 'equal?) equal?)
            ((eq? msg 'is-first?) is-first?)
            ((eq? msg 'is-last?) is-last?)
            ((eq? msg 'is-delayed?) delayed?)
            ((eq? msg 'set-delayed!) set-delayed!)
            ((eq? msg 'unset-delayed!) unset-delayed!)
            (else (display "ERROR -- pathcell-adt dispatch message not understood: ") (display msg))))
    dispatch))