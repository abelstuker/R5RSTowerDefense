
(define (make-object-list)
  (let ((lst (list 0)))

    (define (count) (car lst))
    (define (obj-list) (cdr lst))
    
    (define (add-object! obj)
      ;(display "obj added")
      (set-car! lst (+ (car lst) 1))
      (set-cdr! lst (cons obj (cdr lst))))

    (define (remove-object! obj)
      (define (hulp obj-lst prev)
        (cond ((null? obj-lst) #f)
              ((eq? (car obj-lst) obj)
               (set-cdr! prev (cdr obj-lst))
               (set-car! lst (- (car lst) 1))
               ;(display "removed") (newline)
               #t)
              (else (hulp (cdr obj-lst) (cdr prev)))))
      (hulp (cdr lst) lst))

    (define (contains-object? obj)
      (define (hulp obj-lst)
        (cond ((null? obj-lst) #f)
              ((eq? (car obj-lst) obj)
               #t)
              (else (hulp (cdr obj-lst)))))
      (hulp (cdr lst)))

    (define (dispatch msg)
      (cond ((eq? msg 'get-count) (count))
            ((eq? msg 'get-objects) (obj-list))
            ((eq? msg 'add-object!) add-object!)
            ((eq? msg 'remove-object!) remove-object!)
            ((eq? msg 'contains-object?) contains-object?)
            (else (error "dispatch message not understood by object-list"'msg))))
    dispatch))