(#%require (only racket/base random))
(load "constants-and-auxfunctions.rkt")
(load "screen-adt.rkt")
(load "position-adt.rkt")
(load "level-adt.rkt")

(define (make-game)
  (let ((screen (make-screen window-width window-height))
        (level-number 0)
        (level #f))

    ; The procedure fill-screen fills the screen with background tiles
    (define (fill-screen)
      (define (hulp position)
        ((screen 'draw-background!) position)
        (let* ((x-grid (position 'get-grid-x))
               (y-grid (position 'get-grid-y))
               (last-col? (= x-grid (- horizontal-cells-amount 1)))
               (last-row? (= y-grid (- vertical-cells-amount 1))))
          (cond ((and last-col? last-row?) #t)
                (last-col? (hulp (make-position 0 (+ y-grid 1))))
                (else (hulp (make-position (+ x-grid 1) y-grid))))))
      (hulp (make-position 0 0)))
    
    ; This procedure paints the background and initiates the first level. It is called by main.rkt when the game is started.
    (define (start!)
      (fill-screen)
      (new-level!))
            

    ; This procedure starts the next level (previous level + 1)
    (define (new-level!)
      (set! level-number (+ level-number 1))
      (set! level (make-level screen level-number))
      ((level 'start!)))

    
    (define (dispatch msg)
      (cond ((eq? msg 'start!) start!)
            ; ((eq? msg 'new-level!) new-level!) only required in phase 2, when a new level can be started from inside the Level ADT
            (else (display "ERROR -- game-adt dispatch message not understood: ") (display msg) (newline))))
    dispatch))