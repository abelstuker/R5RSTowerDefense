
(define (make-object-list)
  (let ((lst (list 0)))

    (define count (car lst))
    (define obj-list (cdr lst))
    
    (define (add-to-list obj)
      (set-car! lst (+ (car lst) 1))
      (set-cdr! lst (cons obj (cdr-lst))))

    (define (remove-from-list obj)
      (define (hulp obj-lst prev)
        (cond ((null? obj-lst) #f)
              ((eq? (car obj-lst) obj)
               (set-cdr! prev (cdr obj-lst))
               (set-car! lst (- (car lst) 1))
               #t)
              (else (hulp (cdr obj-lst) (car obj-lst)))))
      (hulp lst lst))

    (define (dispatch msg)
      (cond ((eq? msg 'get-count) count)
            ((eq? msg 'get-list) obj-list)
            ((eq? msg 'add-to-list) add-to-list)
            ((eq? msg 'remove-from-list) remove-from-list)
            (else (display "ERROR - no dispatch message found for make-object-list"))))
    dispatch))